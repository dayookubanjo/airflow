from datetime import datetime, timedelta
import csv
import logging
from tempfile import NamedTemporaryFile

from airflow import DAG
# from airflow.providers.postgres.operators.postgres import PostgresOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook
# from airflow.providers.amazon.aws.hooks.s3 import S3Hook
from airflow.operators.python import PythonOperator

default_args = {
    'owner': 'dayookubanjo',
    'retries': 5,
    'retry_delay': timedelta(minutes=10)
}

def postgres_to_s3(ds_nodash, next_ds_nodash):
    # step 1: query data from postgresql db and save into text file
    hook = PostgresHook(postgres_conn_id="postgres_localhost_lastbounce")
    conn = hook.get_conn()
    cursor = conn.cursor()
    cursor.execute("select * from public.orders where dt >= %s and dt < %s",
                    (ds_nodash, next_ds_nodash))
    # with open (f"get_orders_{ds_nodash}.txt", "w") as f:
    with NamedTemporaryFile(mode='w', suffix=f"{ds_nodash}") as f: 
        csv_writer = csv.writer(f)
        csv_writer.writerow([i[0] for i in cursor.description])
        csv_writer.writerows(cursor)

        # Formerly outside the with cuz we were using with open
        cursor.close()
        conn.close() 
        logging.info("Saved orders data in text file: %s", f"get_orders_{ds_nodash}.txt" )   
    
        # Formerly outside the with cuz we were using with open
        # step 2: upload text file into s3
        # s3_hook = S3Hook(aws_conn_id="minio_conn")
        # s3_hook.load_file(
        #     # filename=f"get_orders_{ds_nodash}.txt",
        #     filename=f.name,
        #     key=f"orders/{ds_nodash}.txt",
        #     bucket_name="airflow",
        #     replace=True
        # )
        # logging.info("Orders file %s has been pushed to S3!", f.name)

with DAG(
    dag_id='dag_with_postgres_hooks_v03',
    default_args=default_args,
    start_date=datetime(2022, 10, 23),
    schedule_interval='0 0 * * *'
) as dag:
    task1 = PythonOperator(
        task_id = 'postgres_to_s3',
        python_callable=postgres_to_s3
    )

    task1